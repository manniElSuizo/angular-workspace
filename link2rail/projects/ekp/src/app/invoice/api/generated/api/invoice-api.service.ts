/**
 * Invoice API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { InvoiceSummaryRequest } from '../model/invoice-summary-request';
// @ts-ignore
import { InvoiceSummaryResponse } from '../model/invoice-summary-response';
// @ts-ignore
import { Problem } from '../model/problem';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class InvoiceAPIService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Retrieves the invoice PDF by repository and document UUID.
     * @param debitorNumber 
     * @param invoiceNumber 
     * @param repositoryUuid 
     * @param documentUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInvoicePdf(debitorNumber: string, invoiceNumber: string, repositoryUuid: string, documentUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/pdf' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public getInvoicePdf(debitorNumber: string, invoiceNumber: string, repositoryUuid: string, documentUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/pdf' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public getInvoicePdf(debitorNumber: string, invoiceNumber: string, repositoryUuid: string, documentUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/pdf' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public getInvoicePdf(debitorNumber: string, invoiceNumber: string, repositoryUuid: string, documentUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/pdf' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (debitorNumber === null || debitorNumber === undefined) {
            throw new Error('Required parameter debitorNumber was null or undefined when calling getInvoicePdf.');
        }
        if (invoiceNumber === null || invoiceNumber === undefined) {
            throw new Error('Required parameter invoiceNumber was null or undefined when calling getInvoicePdf.');
        }
        if (repositoryUuid === null || repositoryUuid === undefined) {
            throw new Error('Required parameter repositoryUuid was null or undefined when calling getInvoicePdf.');
        }
        if (documentUuid === null || documentUuid === undefined) {
            throw new Error('Required parameter documentUuid was null or undefined when calling getInvoicePdf.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (repositoryUuid !== undefined && repositoryUuid !== null) {
            localVarHeaders = localVarHeaders.set('repositoryUuid', String(repositoryUuid));
        }
        if (documentUuid !== undefined && documentUuid !== null) {
            localVarHeaders = localVarHeaders.set('documentUuid', String(documentUuid));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/pdf',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let localVarPath = `/invoices/${this.configuration.encodeParam({name: "debitorNumber", value: debitorNumber, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "invoiceNumber", value: invoiceNumber, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/pdf`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of invoices based on search criteria.
     * @param invoiceSummaryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchInvoices(invoiceSummaryRequest: InvoiceSummaryRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<InvoiceSummaryResponse>;
    public searchInvoices(invoiceSummaryRequest: InvoiceSummaryRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<InvoiceSummaryResponse>>;
    public searchInvoices(invoiceSummaryRequest: InvoiceSummaryRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<InvoiceSummaryResponse>>;
    public searchInvoices(invoiceSummaryRequest: InvoiceSummaryRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (invoiceSummaryRequest === null || invoiceSummaryRequest === undefined) {
            throw new Error('Required parameter invoiceSummaryRequest was null or undefined when calling searchInvoices.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/problem+json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/invoices/search`;
        return this.httpClient.request<InvoiceSummaryResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: invoiceSummaryRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
